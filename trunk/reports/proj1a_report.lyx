#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Project 1A: SUMMA Algorithm
\end_layout

\begin_layout Author
David Noble, Jack Chua
\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Standard
The objective of this checkpoint is to implement the SUMMA distributed matrix
 multiplication algorithm for non-square matrices and analyze the results.
 
\end_layout

\begin_layout Section
Plots
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename pic/panel_size.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align center

\emph on
Figure 1: How total time, broadcast time, and local multiplication time
 varies as panel size varies
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename pic/grid.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align center

\emph on
Figure 2: How total time, broadcast time, and local multiplication time
 varies according to grid layout
\end_layout

\begin_layout Section
Analysis
\end_layout

\begin_layout Standard

\series bold
Methodology.

\series default
 These plots were generated by taking the average times collected from each
 slice for every unique test case.
 Uniqueness is defined by the combination of variables m, n, k, px, py,
 and panel_size.
 We collected the total time elapsed, the time taken to broadcast Ablock
 and Block, and the time taken to compute the local matrix multiply.
 We then used R to plot the times against panel size and grid layout.
\end_layout

\begin_layout Standard

\series bold
Analysis of panel size.
 
\series default
We analyzed how changing the panel size might affect various potential bottlenec
ks in the algorithm.
\end_layout

\begin_layout Itemize
Looking at the 
\series bold
total time elapsed
\series default
, we noticed that increasing the panel size tended to 
\series bold
worsen
\series default
 performance.
 This makes sense because in a broad sense, we shouldn't achieve the benefits
 of parallelism if the panel size is too big and we get closer and closer
 to a (by-nature) sequential outer product.
 
\end_layout

\begin_layout Itemize
The 
\series bold
time taken to broadcast Ablock 
\series default
seemed to 
\series bold
benefit from smaller panel sizes
\series default
.
 The largest panel size provided the largest concentration of high time
 values, while the smallest panel size provided the largest concentration
 of small time values.
\end_layout

\begin_layout Itemize
The 
\series bold
time taken to broadcast Bblock 
\series default
seemed to 
\series bold
benefit from the largest panel size, and the smallest panel size
\series default
.
 The middling panel sizes seemed to provide the worst performance.
\end_layout

\begin_layout Itemize
Finally, 
\series bold
time taken for local matrix multiplication
\series default
 showed a clear increase as the panel size grew.
 This makes obvious sense as larger blocks call for larger overhead during
 sequential multiplication.
\end_layout

\begin_layout Standard
A feasible conclusion is that the smaller the panel size is, the better
 - this allows use to benefit from parallelism as much as possible.
 However, it does not seem like the 
\series bold
absolute smallest
\series default
 panel size is the optimal configuration.
 There may be some small panel_size between 1 and 5 that is optimal from
 an 
\begin_inset Formula $\alpha-\beta$
\end_inset

 perspective.
\end_layout

\begin_layout Standard

\series bold
Analysis of process grid layout.

\series default
 We then analyzed how changing the grid layout might affect the times.
\end_layout

\begin_layout Itemize
Over all of our test cases (which include all panel sizes and matrix dimensions)
, using a square layout improved the total running time of the algorithm.
 We have enough observations to say fairly confidently that this improvement
 is not luck - a square layout probably lends to the best tradeoff between
 latency and bandwidth.
\end_layout

\begin_layout Itemize
Along the same lines, we can see that our broadcast times are improved with
 a square layout.
 This probably contributed the most to total running time.
\end_layout

\begin_layout Itemize
The square layout again seemed to help the local matrix multiply, but not
 as evidently.
 
\end_layout

\begin_layout Standard

\series bold
Best configurations.

\series default
 We found the best configurations via the following calls:
\end_layout

\begin_layout LyX-Code
> ttimedata[ttimedata$meantime == min(ttimedata$meantime),]
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
m    n   k   px  py panel_size meantime 
\end_layout

\begin_layout LyX-Code
256 256 256   4  16    16      2354 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
> Atimedata[Atimedata$meantime == min(Atimedata$meantime),]      
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

m    n   k   px  py panel_size meantime 
\end_layout

\begin_layout LyX-Code
256 256 1024 8     8       6.453125 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
> Btimedata[Btimedata$meantime == min(Btimedata$meantime),]    
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
m    n   k   px  py panel_size meantime 
\end_layout

\begin_layout LyX-Code
256 256 1024 1     64      0.1171875 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
> mtimedata[mtimedata$meantime == min(mtimedata$meantime),]      
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

m   n    k   px  py panel_size meantime 
\end_layout

\begin_layout LyX-Code
256 256 256  4     16      7.40625 
\end_layout

\begin_layout Standard
A few observations:
\end_layout

\begin_layout Itemize
As expected, passing in the smallest matrices possible resulted in the smallest
 (mean) total time elapsed.
 
\end_layout

\begin_layout Itemize
For some odd reason, the 
\begin_inset Formula $1\times64$
\end_inset

 grid layout provided the best (mean) broadcast time for Bblock.
\end_layout

\begin_layout Itemize
The 
\begin_inset Formula $8\times8$
\end_inset

 grid layout provided the best (mean) broadcast time for Ablock.
\end_layout

\begin_layout Section
Performance Model
\end_layout

\begin_layout Standard
We generalize some results from the square SUMMA model, which states 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
T_{net}=\alpha\frac{n}{b}log(p)+\frac{n^{2}}{\beta}\frac{log(p)}{\sqrt{p}}
\]

\end_inset


\end_layout

\begin_layout Standard
We didn't have time to really derive a specific formula for rectangular
 matrices, but perhaps a feasible way to look at it is to view 
\begin_inset Formula $n=average(m,n,k)$
\end_inset

.
 Since 
\begin_inset Formula $n$
\end_inset

 is a marker for the size of a matrix, doing this might not to be too far
 off from the truth.
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
Our analysis shows that a small panel size relative to block size and a
 square grid layout can definitively improve matrix multiplication over
 a naive implementation.
\end_layout

\end_body
\end_document
